global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: 'smtp.gmail.com:587'
  smtp_from: 'alerts@yourdomain.com'
  smtp_auth_username: 'alerts@yourdomain.com'
  smtp_auth_password: 'your-email-password'
  smtp_require_tls: true

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together.
  group_by: ['alertname', 'severity']
  
  # When a new group of alerts is created, wait at least this long to send
  # the initial notification.
  group_wait: 30s
  
  # When the first notification was sent, wait this long to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m
  
  # If an alert has successfully been sent, wait this long before sending
  # a notification again if it's still firing.
  repeat_interval: 3h
  
  # A default receiver
  receiver: 'team-email'
  
  # All the above attributes are inherited by all child routes and can 
  # overwritten on each.
  routes:
  # Critical alerts route
  - match:
      severity: critical
    receiver: 'critical-alerts'
    continue: true
    
    # Group critical alerts by service
    group_by: [service, alertname]
    
  # Warning alerts route
  - match:
      severity: warning
    receiver: 'warning-alerts'
    continue: true
    
  # Database alerts
  - match:
      alertname: 'HighDatabaseLoad'
    receiver: 'database-team'
    
  # API alerts
  - match:
      alertname: 'HighErrorRate'
    receiver: 'api-team'

# Inhibition rules
inhibit_rules:
# Alert 'HighErrorRate' inhibits 'ApiDown' if they're for the same service
- source_match:
    alertname: 'HighErrorRate'
  target_match:
    alertname: 'ApiDown'
  equal: ['service']

# Receivers
receivers:
- name: 'team-email'
  email_configs:
  - to: 'team@yourdomain.com'
    send_resolved: true

- name: 'critical-alerts'
  email_configs:
  - to: 'oncall@yourdomain.com'
    send_resolved: true
  pagerduty_configs:
  - routing_key: 'your-pagerduty-key'
    service_key: 'your-service-key'
    description: '{{ .CommonAnnotations.summary }}'
    details:
      firing: '{{ .Alerts.Firing | len }}'
      resolved: '{{ .Alerts.Resolved | len }}'
      num_firing: '{{ .Alerts.Firing | len }}'
      num_resolved: '{{ .Alerts.Resolved | len }}'

- name: 'warning-alerts'
  email_configs:
  - to: 'dev-team@yourdomain.com'
    send_resolved: true
  slack_configs:
  - api_url: 'https://hooks.slack.com/services/your/slack/webhook'
    channel: '#alerts-warning'
    title: '{{ template "slack.title" . }}'
    text: '{{ template "slack.text" . }}'
    send_resolved: true

- name: 'database-team'
  email_configs:
  - to: 'database-team@yourdomain.com'
    send_resolved: true
  webhook_configs:
  - url: 'http://alertmanager:9093/api/v1/alerts'
    send_resolved: true

- name: 'api-team'
  email_configs:
  - to: 'api-team@yourdomain.com'
    send_resolved: true
  pushover_configs:
  - user_key: 'your-user-key'
    token: 'your-api-token'
    title: '{{ template "pushover.title" . }}'
    message: '{{ template "pushover.message" . }}'
    url: '{{ template "pushover.url" . }}'
    priority: '1'  # High priority
    retry: '30s'
    expire: '1h'
