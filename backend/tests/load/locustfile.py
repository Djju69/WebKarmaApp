"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Locust.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö –Ω–∞–≥—Ä—É–∑–∫–∏.
"""
import os
import random
import time
from datetime import datetime
from typing import Dict, Optional

from locust import HttpUser, task, between, TaskSet, constant
from locust.env import Environment
from locust.log import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging("INFO")

class UserBehavior(TaskSet):
    """–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."""
    
    def on_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–∂–¥–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.token = self.login()
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        } if self.token else {}
    
    def login(self) -> Optional[str]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        credentials = {
            "username": os.getenv("TEST_USER", "test@example.com"),
            "password": os.getenv("TEST_PASSWORD", "testpassword123")
        }
        
        with self.client.post(
            "/api/v1/auth/login",
            json=credentials,
            catch_response=True
        ) as response:
            if response.status_code == 200:
                return response.json().get("access_token")
        return None

    @task(3)
    def get_public_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞)."""
        self.client.get("/api/v1/public/data", headers=self.headers)

    @task(2)
    def get_user_profile(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞)."""
        self.client.get("/api/v1/users/me", headers=self.headers)

    @task(1)
    def create_item(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞)."""
        item_data = {
            "name": f"Item {random.randint(1, 1000)}",
            "description": "Test item",
            "price": random.uniform(10, 1000)
        }
        self.client.post(
            "/api/v1/items",
            json=item_data,
            headers=self.headers
        )

    @task(1)
    def list_items(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        page = random.randint(1, 5)
        self.client.get(
            f"/api/v1/items?page={page}&size=10",
            headers=self.headers
        )

class WebsiteUser(HttpUser):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    tasks = [UserBehavior]
    wait_time = between(1, 3)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ 1-3 —Å–µ–∫—É–Ω–¥—ã
    host = os.getenv("TARGET_HOST", "http://localhost:8000")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏
class SmokeTest(WebsiteUser):
    """–î—ã–º–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)."""
    wait_time = constant(1)
    weight = 1  # –í–µ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è

class NormalLoad(WebsiteUser):
    """–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞."""
    wait_time = between(0.5, 2)
    weight = 3

class HighLoad(WebsiteUser):
    """–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞."""
    wait_time = between(0.1, 1)
    weight = 2

class SpikeTest(WebsiteUser):
    """–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞."""
    wait_time = between(0.05, 0.5)
    weight = 1

def run_load_test():
    """–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    from locust import events
    import pandas as pd
    import matplotlib.pyplot as plt
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = Environment(user_classes=[WebsiteUser])
    env.create_local_runner()
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    env.runner.start(100, spawn_rate=10)  # 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/—Å–µ–∫
    
    try:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        env.runner.greenlet.join()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report(env)

def generate_report(env):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    import os
    from datetime import datetime
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    report_dir = "load_test_reports"
    os.makedirs(report_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    stats = env.stats.serialize_stats()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    import json
    with open(f"{report_dir}/stats_{timestamp}.json", "w") as f:
        json.dump(stats, f, indent=2)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
    from locust.env import Environment
    from locust.log import setup_logging
    from locust_plugins import run_single_user
    
    print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_dir}/report_{timestamp}.html")

if __name__ == "__main__":
    run_load_test()
