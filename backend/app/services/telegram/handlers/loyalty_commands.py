""
Telegram bot command handlers for loyalty system.
"""
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler
from sqlalchemy.orm import Session

from app.db.base import get_db
from app.services.loyalty.service import LoyaltyService
from app.core.security import get_current_user
from app.models.user import User

class LoyaltyCommandHandlers:
    """Handlers for loyalty-related Telegram commands."""
    
    def __init__(self):
        self.commands = [
            ('balance', self.show_balance),
            ('earn', self.earn_points),
            ('spend', self.spend_points),
            ('history', self.show_history),
            ('help_loyalty', self.help_loyalty)
        ]
        
        self.callbacks = {
            'loyalty_earn': self.handle_earn_callback,
            'loyalty_spend': self.handle_spend_callback,
            'loyalty_history': self.handle_history_callback
        }
    
    async def show_balance(self, update: Update, context: CallbackContext) -> None:
        """Show user's loyalty points balance and tier."""
        db = next(get_db())
        try:
            # Get user from database
            user = db.query(User).filter(
                User.telegram_id == update.effective_user.id
            ).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            # Get loyalty account info
            service = LoyaltyService(db)
            account_info = service.get_account_summary(user.id)
            
            # Format message
            message = (
                f"üíé *–í–∞—à –±–∞–ª–∞–Ω—Å:* {account_info['points_balance']} –±–∞–ª–ª–æ–≤\n"
                f"üèÜ *–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:* {account_info['tier_benefits']['name']}\n"
                f"üìä *–í—Å–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ:* {account_info['total_points_earned']} –±–∞–ª–ª–æ–≤\n"
                f"üí≥ *–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∞–ª–ª–æ–≤:* {account_info['total_points_spent']}\n\n"
                f"üéÅ *–ë–æ–Ω—É—Å—ã —É—Ä–æ–≤–Ω—è:*\n"
                f"- –°–∫–∏–¥–∫–∞ {account_info['tier_benefits']['discount']}% –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏\n"
            )
            
            if account_info['tier_benefits']['free_shipping_threshold'] is not None:
                message += f"- –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {account_info['tier_benefits']['free_shipping_threshold']} ‚ÇΩ\n"
            if account_info['next_tier']:
                message += f"\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {account_info['points_to_next_tier']} –±–∞–ª–ª–æ–≤"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–Ω—É—Å–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"Error in show_balance: {e}")
        finally:
            db.close()
    
    async def earn_points(self, update: Update, context: CallbackContext) -> None:
        """Handle /earn command to add points to user's account."""
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /earn <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–±–∞–ª–ª–æ–≤> [–ø—Ä–∏—á–∏–Ω–∞]"
            )
            return
            
        try:
            points = int(context.args[0])
            reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤"
            
            db = next(get_db())
            try:
                user = db.query(User).filter(
                    User.telegram_id == update.effective_user.id
                ).first()
                
                if not user:
                    await update.message.reply_text(
                        "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                    )
                    return
                
                # Add points using loyalty service
                service = LoyaltyService(db)
                transaction = service.earn_points({
                    'user_id': user.id,
                    'points': points,
                    'description': reason,
                    'reference_id': f'tg_{update.update_id}'
                })
                
                await update.message.reply_text(
                    f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!\n"
                    f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {transaction.loyalty_account.points_balance} –±–∞–ª–ª–æ–≤"
                )
                
            finally:
                db.close()
                
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"Error in earn_points: {e}")
    
    async def spend_points(self, update: Update, context: CallbackContext) -> None:
        """Handle /spend command to use points from user's account."""
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /spend <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–±–∞–ª–ª–æ–≤> [–ø—Ä–∏—á–∏–Ω–∞]"
            )
            return
            
        try:
            points = int(context.args[0])
            reason = ' '.join(context.args[1:]) if len(context.args) > 1 else "–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤"
            
            db = next(get_db())
            try:
                user = db.query(User).filter(
                    User.telegram_id == update.effective_user.id
                ).first()
                
                if not user:
                    await update.message.reply_text(
                        "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                    )
                    return
                
                # Spend points using loyalty service
                service = LoyaltyService(db)
                transaction = service.spend_points({
                    'user_id': user.id,
                    'points': points,
                    'description': reason,
                    'reference_id': f'tg_{update.update_id}'
                })
                
                if not transaction:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è."
                    )
                    return
                
                await update.message.reply_text(
                    f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n"
                    f"üí≥ –û—Å—Ç–∞—Ç–æ–∫: {transaction.loyalty_account.points_balance} –±–∞–ª–ª–æ–≤"
                )
                
            finally:
                db.close()
                
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"Error in spend_points: {e}")
    
    async def show_history(self, update: Update, context: CallbackContext) -> None:
        """Show user's transaction history."""
        db = next(get_db())
        try:
            user = db.query(User).filter(
                User.telegram_id == update.effective_user.id
            ).first()
            
            if not user:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
                return
            
            # Get transaction history
            from app.models.loyalty import Transaction
            transactions = (
                db.query(Transaction)
                .filter(Transaction.user_id == user.id)
                .order_by(Transaction.created_at.desc())
                .limit(10)
                .all()
            )
            
            if not transactions:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏.")
                return
            
            # Format history message
            message = "*–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:*\n\n"
            for tx in transactions:
                emoji = "‚¨ÜÔ∏è" if tx.transaction_type in ["earn", "adjustment"] else "‚¨áÔ∏è"
                date = tx.created_at.strftime("%d.%m.%Y %H:%M")
                message += f"{emoji} *{tx.amount}* –±–∞–ª–ª–æ–≤ - {tx.description}\n"
                message += f"`{date}`\n\n"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            print(f"Error in show_history: {e}")
        finally:
            db.close()
    
    async def help_loyalty(self, update: Update, context: CallbackContext) -> None:
        """Show help message about loyalty commands."""
        help_text = """
üíé *–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –∏ —É—Ä–æ–≤–µ–Ω—å
/earn <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞] - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã (–∞–¥–º–∏–Ω)
/spend <–±–∞–ª–ª—ã> [–ø—Ä–∏—á–∏–Ω–∞] - –°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã
/history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
/help_loyalty - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ

–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –Ω–∞ —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ß–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤, —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å –∏ –≤—ã–≥–æ–¥–Ω–µ–µ —É—Å–ª–æ–≤–∏—è!
        """
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
    
    # Callback handlers for inline buttons
    async def handle_earn_callback(self, update: Update, context: CallbackContext) -> None:
        """Handle earn points callback."""
        query = update.callback_query
        await query.answer()
        
        # Extract data from callback
        data = query.data.split(':')
        if len(data) < 3:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
            
        points = int(data[1])
        user_id = int(data[2])
        
        db = next(get_db())
        try:
            # Verify admin rights
            admin = db.query(User).filter(
                User.telegram_id == query.from_user.id,
                User.is_superuser == True
            ).first()
            
            if not admin:
                await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                return
            
            # Add points
            service = LoyaltyService(db)
            transaction = service.earn_points({
                'user_id': user_id,
                'points': points,
                'description': f'–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin.username}',
                'reference_id': f'tg_cb_{query.id}'
            })
            
            # Get user info
            user = db.query(User).get(user_id)
            
            # Notify admin
            await query.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.full_name} "
                f"–Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {transaction.loyalty_account.points_balance} –±–∞–ª–ª–æ–≤"
            )
            
            # Notify user if possible
            if user.telegram_id:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!\n"
                              f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {transaction.loyalty_account.points_balance} –±–∞–ª–ª–æ–≤"
                    )
                except Exception as e:
                    print(f"Failed to notify user: {e}")
            
        except Exception as e:
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤."
            )
            print(f"Error in handle_earn_callback: {e}")
        finally:
            db.close()
    
    async def handle_spend_callback(self, update: Update, context: CallbackContext) -> None:
        """Handle spend points callback."""
        query = update.callback_query
        await query.answer()
        
        # Implementation similar to handle_earn_callback
        # ...
        
    async def handle_history_callback(self, update: Update, context: CallbackContext) -> None:
        """Handle show history callback."""
        query = update.callback_query
        await query.answer()
        
        # Implementation similar to show_history
        # ...

def register_handlers(application):
    """Register all loyalty command handlers."""
    loyalty_handlers = LoyaltyCommandHandlers()
    
    # Register command handlers
    for command, handler in loyalty_handlers.commands:
        application.add_handler(CommandHandler(command, handler))
    
    # Register callback handlers
    for callback_prefix, handler in loyalty_handlers.callbacks.items():
        application.add_handler(CallbackQueryHandler(
            handler, pattern=f'^{callback_prefix}:'
        ))
    
    return loyalty_handlers
