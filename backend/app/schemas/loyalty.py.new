"""
Pydantic models for loyalty program data validation and serialization.
"""
from typing import Optional, List, Dict, Any
from datetime import datetime
from pydantic import BaseModel, Field, validator
from enum import Enum

class PointsEarn(BaseModel):
    """Schema for earning points."""
    user_id: int
    points: int
    reason: Optional[str] = None
    expires_at: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None

class PointsSpend(BaseModel):
    """Schema for spending points."""
    user_id: int
    points: int
    reason: str
    order_id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None

class PointsAdjust(BaseModel):
    """Schema for adjusting points."""
    user_id: int
    points: int
    reason: str
    expires_at: Optional[datetime] = None
    metadata: Optional[Dict[str, Any]] = None

class LoyaltyTier(str, Enum):
    """Loyalty tier levels."""
    BRONZE = "bronze"
    SILVER = "silver"
    GOLD = "gold"
    PLATINUM = "platinum"

class LoyaltyTierSchema(BaseModel):
    """Schema for loyalty tier information."""
    name: str
    min_points: int
    discount: float
    benefits: List[str] = []

class LoyaltyAccount(BaseModel):
    """Schema for loyalty account information."""
    user_id: int
    points: int
    tier: LoyaltyTier
    points_to_next_tier: int
    next_tier: Optional[LoyaltyTier] = None
    expires_at: Optional[datetime] = None

class TransactionType(str, Enum):
    """Types of loyalty point transactions."""
    EARN = "earn"
    SPEND = "spend"
    ADJUST = "adjust"
    EXPIRE = "expire"

class Transaction(BaseModel):
    """Schema for loyalty point transaction."""
    id: int
    user_id: int
    points: int
    balance: int
    type: TransactionType
    reason: Optional[str] = None
    reference_id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    created_at: datetime

class WebhookEvent(BaseModel):
    """Base schema for webhook events."""
    event_id: str
    event_type: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    data: Dict[str, Any]

class PointsEarnedEvent(WebhookEvent):
    """Schema for points earned event."""
    event_type: str = "points.earned"
    data: PointsEarn

class PointsSpentEvent(WebhookEvent):
    """Schema for points spent event."""
    event_type: str = "points.spent"
    data: PointsSpend

class TierUpgradedEvent(WebhookEvent):
    """Schema for tier upgraded event."""
    event_type: str = "tier.upgraded"
    data: Dict[str, Any] = Field(
        ...,
        example={
            "user_id": 12345,
            "old_tier": "silver",
            "new_tier": "gold"
        }
    )
