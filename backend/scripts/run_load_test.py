#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Locust.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã.
"""
import os
import sys
import subprocess
import time
import json
from datetime import datetime
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
TEST_CONFIGS = {
    "smoke": {
        "users": 10,
        "spawn_rate": 1,
        "duration": "1m",
        "description": "–î—ã–º–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 1 –º–∏–Ω—É—Ç–∞)"
    },
    "normal": {
        "users": 100,
        "spawn_rate": 10,
        "duration": "5m",
        "description": "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 5 –º–∏–Ω—É—Ç)"
    },
    "high": {
        "users": 1000,
        "spawn_rate": 50,
        "duration": "10m",
        "description": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 10 –º–∏–Ω—É—Ç)"
    },
    "spike": {
        "users": 5000,
        "spawn_rate": 100,
        "duration": "15m",
        "description": "–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (5000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 15 –º–∏–Ω—É—Ç)"
    },
    "soak": {
        "users": 100,
        "spawn_rate": 5,
        "duration": "1h",
        "description": "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 1 —á–∞—Å)"
    }
}

def run_locust_test(test_name, config, host, headless=True):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {config['description']}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    results_dir = Path("load_test_results") / f"{test_name}_{timestamp}"
    results_dir.mkdir(parents=True, exist_ok=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Locust
    cmd = [
        "locust",
        "-f", "locustfile.py",
        "--host", host,
        "--users", str(config["users"]),
        "--spawn-rate", str(config["spawn_rate"]),
        "--run-time", config["duration"],
        "--headless",
        "--csv", str(results_dir / "report"),
        "--html", str(results_dir / "report.html"),
        "--loglevel", "WARNING"
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    start_time = time.time()
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.1f} —Å–µ–∫—É–Ω–¥")
        return {
            "status": "success",
            "output": result.stdout,
            "error": result.stderr,
            "report_dir": str(results_dir.absolute())
        }
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        return {
            "status": "error",
            "output": e.stdout,
            "error": e.stderr,
            "report_dir": str(results_dir.absolute())
        }

def generate_summary_report(results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–∞–º"""
    report = "# –û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n\n"
    report += f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
    
    for test_name, result in results.items():
        report += f"## {test_name.upper()}: {result.get('config', {}).get('description', '')}\n"
        report += f"- **–°—Ç–∞—Ç—É—Å:** {result['status']}\n"
        if result['status'] == 'success':
            report += "- **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:** [HTML –æ—Ç—á–µ—Ç]"
            report += f"(file://{os.path.abspath(result['report_dir'])}/report.html)\n"
            # –ü–∞—Ä—Å–∏–º CSV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
            try:
                with open(f"{result['report_dir']}/report_stats.csv") as f:
                    lines = f.readlines()
                    if len(lines) > 1:
                        headers = lines[0].strip().split(',')
                        values = lines[-1].strip().split(',')
                        metrics = dict(zip(headers, values))
                        
                        report += "- **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
                        report += f"  - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.get('Request Count', 'N/A')}\n"
                        report += f"  - –û—à–∏–±–∫–∏: {metrics.get('Failure Count', '0')} "
                        if int(metrics.get('Failure Count', 0)) > 0:
                            report += "‚ö†Ô∏è"
                        report += "\n"
                        
                        report += f"  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.get('Average Response Time', 'N/A')} –º—Å\n"
                        report += f"  - RPS: {metrics.get('Requests/s', 'N/A')}\n"
                        report += f"  - 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {metrics.get('95%', 'N/A')} –º—Å\n"
            except Exception as e:
                report += f"- –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {str(e)}\n"
        else:
            report += f"- **–û—à–∏–±–∫–∞:** {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
        report += "\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_path = "load_test_results/summary_report.md"
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(report)
    
    return report_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    parser.add_argument('--host', type=str, default="http://localhost:8000",
                       help='–ë–∞–∑–æ–≤—ã–π URL —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    parser.add_argument('--test', type=str, choices=['all'] + list(TEST_CONFIGS.keys()),
                       default='all', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞')
    parser.add_argument('--headless', action='store_true',
                       help='–ó–∞–ø—É—Å–∫–∞—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ (–±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
    tests_to_run = [args.test] if args.test != 'all' else TEST_CONFIGS.keys()
    
    print(f"üöÄ –ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {args.host}")
    print(f"üìä –ë—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã —Ç–µ—Å—Ç—ã: {', '.join(tests_to_run)}\n")
    
    results = {}
    for test_name in tests_to_run:
        if test_name not in TEST_CONFIGS:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç '{test_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
            
        config = TEST_CONFIGS[test_name]
        results[test_name] = {
            "config": config,
            **run_locust_test(test_name, config, args.host, args.headless)
        }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    report_path = generate_summary_report(results)
    print(f"\nüìä –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {os.path.abspath(report_path)}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
    print("\n" + "="*50)
    print("–°–í–û–î–ö–ê –ü–û –¢–ï–°–¢–ê–ú")
    print("="*50)
    for test_name, result in results.items():
        status = "‚úÖ –£–°–ü–ï–•" if result["status"] == "success" else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name.upper():<10} | {status}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
